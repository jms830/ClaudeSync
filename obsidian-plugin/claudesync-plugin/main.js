/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var f=Object.prototype.hasOwnProperty;var b=(c,l)=>{for(var t in l)y(c,t,{get:l[t],enumerable:!0})},P=(c,l,t,n)=>{if(l&&typeof l=="object"||typeof l=="function")for(let e of v(l))!f.call(c,e)&&e!==t&&y(c,e,{get:()=>l[e],enumerable:!(n=w(l,e))||n.enumerable});return c};var E=c=>P(y({},"__esModule",{value:!0}),c);var I={};b(I,{default:()=>m});module.exports=E(I);var s=require("obsidian"),x={claudeSyncPath:"claudesync",pythonPath:"python",autoSync:!1,syncInterval:300,conflictResolutionStrategy:"manual",showStatusBar:!0,showSidePanel:!0,useShellCommandsPlugin:!1},p=class{constructor(l){this.plugin=l}async executeCommand(l,t){let n=`${this.plugin.settings.claudeSyncPath} ${l}`,e=this.plugin.app.plugins.plugins["obsidian-shellcommands"];if(e&&e.enabled&&this.plugin.settings.useShellCommandsPlugin)try{let a=`claudesync-${l.replace(/\s+/g,"-")}`;if(!e.commands||!e.commands[a])throw new Error(`Shell Commands plugin is installed but the command needs to be configured:

1. Go to Settings \u2192 Shell Commands
2. Create a new command with:
   - Alias: ${a}
   - Command: ${n}
3. Try again`);return await e.executeCommand(a),new s.Notice(`ClaudeSync: ${l} - Check the result in terminal or output`),"Command executed via Shell Commands plugin"}catch(a){throw console.error("Shell Commands execution failed:",a),a}throw await navigator.clipboard.writeText(n),new Error(`Cannot execute shell commands directly.

Command copied to clipboard: ${n}

Options:
1. Install and configure "Shell Commands" plugin
2. Run the command manually in terminal
3. Enable Shell Commands in ClaudeSync settings`)}},g=class extends s.ItemView{constructor(t,n){super(t);this.plugin=n,this.commandExecutor=new p(n)}getViewType(){return"claudesync-sidebar"}getDisplayText(){return"ClaudeSync"}getIcon(){return"sync"}async onOpen(){this.createSidebarContent(),this.startAutoRefresh()}async onClose(){this.refreshInterval&&clearInterval(this.refreshInterval)}createSidebarContent(){let t=this.containerEl.children[1];t.empty(),t.addClass("claudesync-sidebar");let n=t.createEl("div",{cls:"claudesync-header"});n.createEl("h4",{text:"ClaudeSync Status"});let e=n.createEl("button",{cls:"claudesync-refresh-btn",attr:{"aria-label":"Refresh"}});e.innerHTML="\u{1F504}",e.onclick=()=>this.refreshStatus(),this.statusContainer=t.createEl("div",{cls:"claudesync-status"});let a=t.createEl("div",{cls:"claudesync-section-header"});a.createEl("h5",{text:"Projects"});let i=a.createEl("div",{cls:"claudesync-bulk-actions"}),o=i.createEl("button",{text:"Sync All",cls:"claudesync-btn-small"});o.onclick=()=>this.executeCommand("select sync");let r=i.createEl("button",{text:"Pull Chats",cls:"claudesync-btn-small"});r.onclick=()=>this.executeCommand("select chat-pull"),this.projectsContainer=t.createEl("div",{cls:"claudesync-projects"}),t.createEl("div",{cls:"claudesync-section-header"}).createEl("h5",{text:"Quick Actions"});let d=t.createEl("div",{cls:"claudesync-actions"});this.createActionButton(d,"\u{1F50D} Detect Conflicts","conflict detect"),this.createActionButton(d,"\u26A1 Resolve Conflicts","conflict resolve"),this.createActionButton(d,"\u{1F4CA} Project Overview","select overview"),this.createActionButton(d,"\u2699\uFE0F Settings",null,()=>{this.app.setting.open(),this.app.setting.openTabById("claudesync")}),t.createEl("div",{cls:"claudesync-section-header"}).createEl("h5",{text:"Installation"});let h=t.createEl("div",{cls:"claudesync-actions"});this.createActionButton(h,"\u{1F4E6} Install ClaudeSync",null,async()=>{await this.installClaudeSync()}),this.createActionButton(h,"\u{1F5D1}\uFE0F Uninstall ClaudeSync",null,async()=>{await this.uninstallClaudeSync()}),this.createActionButton(h,"\u{1F504} Update ClaudeSync",null,async()=>{await this.updateClaudeSync()}),this.createActionButton(h,"\u2705 Check Installation",null,async()=>{await this.checkClaudeSyncInstallation()}),this.checkShellCommandsPlugin(),this.refreshStatus()}checkShellCommandsPlugin(){let t=this.app.plugins.plugins["obsidian-shellcommands"];if(!t&&this.plugin.settings.useShellCommandsPlugin){let n=this.statusContainer.createEl("div",{cls:"claudesync-alert claudesync-alert-warning"});n.innerHTML="\u26A0\uFE0F Shell Commands plugin not installed or disabled";let e=n.createEl("button",{text:"Install Guide",cls:"claudesync-btn-small"});e.onclick=()=>{new s.Notice(`To use ClaudeSync commands:
1. Go to Settings \u2192 Community Plugins
2. Search for "Shell Commands"
3. Install and enable the plugin
4. Configure commands in Shell Commands settings`)}}else if(t&&this.plugin.settings.useShellCommandsPlugin){let n=this.statusContainer.createEl("div",{cls:"claudesync-alert claudesync-alert-info"});n.innerHTML="\u2139\uFE0F Shell Commands plugin detected";let e=n.createEl("button",{text:"Configure Commands",cls:"claudesync-btn-small"});e.onclick=()=>{new s.Notice(`Configure Shell Commands:
1. Go to Settings \u2192 Shell Commands
2. Add commands like:
   - claudesync push
   - claudesync pull
   - claudesync conflict detect
3. Set working directory to vault path`)}}}createActionButton(t,n,e,a){let i=t.createEl("button",{text:n,cls:"claudesync-action-btn"});a?i.onclick=a:e&&(i.onclick=()=>this.executeCommand(e))}async executeCommand(t,n){try{await this.commandExecutor.executeCommand(t,n),new s.Notice(`ClaudeSync: ${t} completed`)}catch(e){console.error("ClaudeSync command failed:",e),new s.Notice(`ClaudeSync error: ${e.message}`)}}async refreshStatus(){try{await this.updateGeneralStatus(),await this.updateProjectsList()}catch(t){console.error("Failed to refresh ClaudeSync status:",t),this.showError("Failed to refresh status")}}async updateGeneralStatus(){this.statusContainer.empty();let t=this.statusContainer.createEl("div",{cls:"claudesync-alert claudesync-alert-info"});t.innerHTML="\u2139\uFE0F ClaudeSync status requires Shell Commands plugin"}async updateProjectsList(){this.projectsContainer.empty();let t=this.app.vault.adapter.getBasePath();this.projectsContainer.createEl("div",{text:"Project detection requires Shell Commands plugin",cls:"claudesync-no-projects"})}showNotice(t,n){new s.Notice(t)}showError(t){console.error(t),new s.Notice(t)}startAutoRefresh(){this.refreshInterval&&clearInterval(this.refreshInterval),this.refreshInterval=window.setInterval(()=>{this.refreshStatus()},3e4)}async installClaudeSync(){new s.Notice(`Opening ClaudeSync installer...
Please follow the installation prompts in the command window.`);try{let n=`${this.app.vault.adapter.getBasePath()}\\.obsidian\\plugins\\claudesync`,e=`${n}\\install-claudesync.bat`;await navigator.clipboard.writeText(e),await this.tryOpenWithShellCommands(e)||new s.Modal(this.app,i=>{i.titleEl.setText("Install ClaudeSync"),i.contentEl.empty();let o=i.contentEl.createEl("div");o.innerHTML=`
						<p>To install ClaudeSync:</p>
						<ol>
							<li>Open File Explorer</li>
							<li>Navigate to: <code>${n}</code></li>
							<li>Double-click: <code>install-claudesync.bat</code></li>
							<li>Follow the installation prompts</li>
						</ol>
						<p>The installer path has been copied to your clipboard.</p>
						<p><strong>Or</strong> open Command Prompt and run:</p>
						<pre>"${e}"</pre>
					`;let u=i.contentEl.createEl("div",{cls:"modal-button-container"}).createEl("button",{text:"OK",cls:"mod-cta"});u.onclick=()=>i.close()}).open()}catch(t){new s.Notice(`Error: ${t.message}`)}}async uninstallClaudeSync(){new S(this.app,"Uninstall ClaudeSync","Are you sure you want to uninstall ClaudeSync? This will remove the installation but preserve your project files.",async()=>{try{let a=`${`${this.app.vault.adapter.getBasePath()}\\.obsidian\\plugins\\claudesync`}\\uninstall-claudesync.bat`;await navigator.clipboard.writeText(a),await this.tryOpenWithShellCommands(a)||new s.Notice(`Uninstaller path copied to clipboard.
Please run it manually from File Explorer.`)}catch(n){new s.Notice(`Error: ${n.message}`)}}).open()}async updateClaudeSync(){try{let e=`${`${this.app.vault.adapter.getBasePath()}\\.obsidian\\plugins\\claudesync`}\\update-claudesync.bat`;await navigator.clipboard.writeText(e),await this.tryOpenWithShellCommands(e)||new s.Notice(`Update script path copied to clipboard.
Please run it manually from File Explorer.`)}catch(t){new s.Notice(`Error: ${t.message}`)}}async checkClaudeSyncInstallation(){try{let t="C:\\Users\\jordans\\AppData\\Local\\ClaudeSync",n=`${t}\\venv\\Scripts\\claudesync.exe`,e=require("fs").promises;new s.Modal(this.app,a=>{a.titleEl.setText("Check ClaudeSync Installation"),a.contentEl.empty();let i=a.contentEl.createEl("div");i.innerHTML=`
					<p>To check if ClaudeSync is installed:</p>
					<ol>
						<li>Open Command Prompt (cmd.exe)</li>
						<li>Run: <code>claudesync --version</code></li>
					</ol>
					<p>If ClaudeSync is installed via our installer, you can also try:</p>
					<pre>"${t}\\claudesync.bat" --version</pre>
					<p><strong>Expected locations:</strong></p>
					<ul>
						<li>Installation: <code>${t}</code></li>
						<li>Executable: <code>${n}</code></li>
					</ul>
				`;let o=a.contentEl.createEl("div",{cls:"modal-button-container"}),r=o.createEl("button",{text:"Copy Check Command"});r.onclick=async()=>{await navigator.clipboard.writeText(`"${t}\\claudesync.bat" --version`),new s.Notice("Command copied to clipboard!")};let u=o.createEl("button",{text:"OK",cls:"mod-cta"});u.onclick=()=>a.close()}).open()}catch(t){new s.Notice(`Error: ${t.message}`)}}async tryOpenWithShellCommands(t){let n=this.app.plugins.plugins["obsidian-shellcommands"];return n&&n.enabled&&new s.Notice(`Configure Shell Commands plugin to run:
start "" "${t}"
Or run the installer manually.`),!1}},C=class extends s.PluginSettingTab{constructor(t,n){super(t,n);this.plugin=n}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"ClaudeSync Settings"}),t.createEl("div",{cls:"claudesync-settings-notice"}).createEl("p",{text:'\u26A0\uFE0F This plugin requires the "Shell Commands" community plugin to execute ClaudeSync commands.'}),new s.Setting(t).setName("Use Shell Commands Plugin").setDesc("Enable command execution via Shell Commands plugin (recommended)").addToggle(e=>e.setValue(this.plugin.settings.useShellCommandsPlugin).onChange(async a=>{this.plugin.settings.useShellCommandsPlugin=a,await this.plugin.saveSettings()})),new s.Setting(t).setName("ClaudeSync Command Path").setDesc('Path to the claudesync command (leave as "claudesync" if installed globally)').addText(e=>e.setPlaceholder("claudesync").setValue(this.plugin.settings.claudeSyncPath).onChange(async a=>{this.plugin.settings.claudeSyncPath=a,await this.plugin.saveSettings()})),new s.Setting(t).setName("Python Path").setDesc('Path to Python executable (for WSL users, use "wsl python")').addText(e=>e.setPlaceholder("python").setValue(this.plugin.settings.pythonPath).onChange(async a=>{this.plugin.settings.pythonPath=a,await this.plugin.saveSettings()})),new s.Setting(t).setName("Show Status Bar").setDesc("Display ClaudeSync status in the status bar").addToggle(e=>e.setValue(this.plugin.settings.showStatusBar).onChange(async a=>{this.plugin.settings.showStatusBar=a,await this.plugin.saveSettings(),this.plugin.updateStatusBar()})),new s.Setting(t).setName("Show Side Panel").setDesc("Display the ClaudeSync side panel").addToggle(e=>e.setValue(this.plugin.settings.showSidePanel).onChange(async a=>{this.plugin.settings.showSidePanel=a,await this.plugin.saveSettings(),this.plugin.updateSidePanel()})),new s.Setting(t).setName("Conflict Resolution Strategy").setDesc("Default strategy for resolving conflicts").addDropdown(e=>e.addOption("manual","Manual Resolution").addOption("local","Prefer Local Changes").addOption("remote","Prefer Remote Changes").setValue(this.plugin.settings.conflictResolutionStrategy).onChange(async a=>{this.plugin.settings.conflictResolutionStrategy=a,await this.plugin.saveSettings()})),new s.Setting(t).setName("Auto Sync").setDesc("Automatically sync projects at regular intervals").addToggle(e=>e.setValue(this.plugin.settings.autoSync).onChange(async a=>{this.plugin.settings.autoSync=a,await this.plugin.saveSettings(),this.plugin.updateAutoSync()})),new s.Setting(t).setName("Sync Interval").setDesc("Interval in seconds for auto sync (if enabled)").addSlider(e=>e.setLimits(60,3600,60).setValue(this.plugin.settings.syncInterval).setDynamicTooltip().onChange(async a=>{this.plugin.settings.syncInterval=a,await this.plugin.saveSettings(),this.plugin.updateAutoSync()}))}},m=class extends s.Plugin{async onload(){await this.loadSettings(),this.commandExecutor=new p(this),this.updateStatusBar(),this.updateSidePanel(),this.registerView("claudesync-sidebar",n=>new g(n,this)),this.addRibbonIcon("sync","ClaudeSync",async n=>{if(this.app.workspace.getLeavesOfType("claudesync-sidebar").length)this.app.workspace.detachLeavesOfType("claudesync-sidebar");else{let a=this.app.workspace.getLeftLeaf(!1);a&&(await a.setViewState({type:"claudesync-sidebar",active:!0}),this.app.workspace.revealLeaf(a))}}).setAttribute("aria-label","Toggle ClaudeSync sidebar"),this.addCommands(),this.addSettingTab(new C(this.app,this)),this.updateAutoSync(),console.log("ClaudeSync plugin loaded")}onunload(){this.autoSyncInterval&&clearInterval(this.autoSyncInterval),console.log("ClaudeSync plugin unloaded")}addCommands(){this.addCommand({id:"claudesync-push",name:"Push current project",callback:()=>this.showCommandGuide("push")}),this.addCommand({id:"claudesync-sync-all",name:"Sync all projects",callback:()=>this.showCommandGuide("select sync")}),this.addCommand({id:"claudesync-detect-conflicts",name:"Detect conflicts",callback:()=>this.showCommandGuide("conflict detect")}),this.addCommand({id:"claudesync-resolve-conflicts",name:"Resolve conflicts",callback:()=>this.showCommandGuide("conflict resolve")}),this.addCommand({id:"claudesync-pull-chats",name:"Pull chat conversations",callback:()=>this.showCommandGuide("chat pull --backup-existing")}),this.addCommand({id:"claudesync-pull-all-chats",name:"Pull chats for all projects",callback:()=>this.showCommandGuide("select chat-pull")}),this.addCommand({id:"claudesync-project-overview",name:"Show project overview",callback:()=>this.showCommandGuide("select overview")}),this.addCommand({id:"claudesync-project-status",name:"Show project status",callback:()=>this.showCommandGuide("select status")}),this.addCommand({id:"claudesync-refresh-sidebar",name:"Refresh ClaudeSync sidebar",callback:()=>{this.sidebarView&&this.sidebarView.refreshStatus()}})}showCommandGuide(t){!this.app.plugins.plugins["obsidian-shellcommands"]||!this.settings.useShellCommandsPlugin?(new s.Notice(`To execute: claudesync ${t}

Options:
1. Install Shell Commands plugin
2. Run command manually in terminal
3. Copy command to clipboard`),navigator.clipboard.writeText(`claudesync ${t}`),new s.Notice("Command copied to clipboard!")):this.commandExecutor.executeCommand(t).catch(e=>{new s.Notice(`Error: ${e.message}`)})}updateStatusBar(){this.statusBarItem&&this.statusBarItem.remove(),this.settings.showStatusBar&&(this.statusBarItem=this.addStatusBarItem(),this.statusBarItem.setText("\u{1F504} ClaudeSync"),this.statusBarItem.addClass("claudesync-status-bar"),this.updateStatusBarContent())}async updateStatusBarContent(){this.statusBarItem&&this.statusBarItem.setText("\u2705 ClaudeSync Ready")}async updateSidePanel(){if(this.settings.showSidePanel){let t=this.app.workspace.getLeftLeaf(!1);t&&await t.setViewState({type:"claudesync-sidebar",active:!0})}else this.app.workspace.detachLeavesOfType("claudesync-sidebar")}updateAutoSync(){this.autoSyncInterval&&clearInterval(this.autoSyncInterval),this.settings.autoSync&&new s.Notice(`Auto-sync requires Shell Commands plugin.
Please install it from Community Plugins.`)}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},S=class extends s.Modal{constructor(t,n,e,a){super(t);this.title=n,this.message=e,this.onConfirm=a}onOpen(){let{contentEl:t}=this;t.createEl("h2",{text:this.title}),t.createEl("p",{text:this.message});let n=t.createEl("div",{cls:"modal-button-container"}),e=n.createEl("button",{text:"Confirm",cls:"mod-warning"});e.onclick=()=>{this.close(),this.onConfirm()};let a=n.createEl("button",{text:"Cancel"});a.onclick=()=>this.close()}onClose(){let{contentEl:t}=this;t.empty()}};
