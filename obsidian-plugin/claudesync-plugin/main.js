/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ClaudeSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  claudeSyncPath: "claudesync",
  pythonPath: "python",
  autoSync: false,
  syncInterval: 300,
  conflictResolutionStrategy: "manual",
  showStatusBar: true,
  showSidePanel: true
};
var InstallModal = class extends import_obsidian.Modal {
  constructor(app, installPath) {
    super(app);
    this.installPath = installPath;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Install ClaudeSync" });
    const instructionsDiv = contentEl.createEl("div");
    instructionsDiv.innerHTML = `
            <p>To install ClaudeSync:</p>
            <ol>
                <li>Open File Explorer</li>
                <li>Navigate to: <code>${this.installPath.replace(/\\install-claudesync\.bat$/, "")}</code></li>
                <li>Double-click: <code>install-claudesync.bat</code></li>
                <li>Follow the installation prompts</li>
            </ol>
            <p>The installer path has been copied to your clipboard.</p>
            <p><strong>Or</strong> open Command Prompt and run:</p>
            <pre>"${this.installPath}"</pre>
        `;
    const buttonContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    const okButton = buttonContainer.createEl("button", { text: "OK", cls: "mod-cta" });
    okButton.onclick = () => this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ConfirmationModal = class extends import_obsidian.Modal {
  constructor(app, title, message, onConfirm) {
    super(app);
    this.title = title;
    this.message = message;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    const confirmButton = buttonContainer.createEl("button", {
      text: "Confirm",
      cls: "mod-warning"
    });
    confirmButton.onclick = () => {
      this.close();
      this.onConfirm();
    };
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.onclick = () => this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CheckInstallationModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Check ClaudeSync Installation" });
    const basePath = "C:\\Users\\jordans\\AppData\\Local\\ClaudeSync";
    const exePath = `${basePath}\\venv\\Scripts\\claudesync.exe`;
    const instructionsDiv = contentEl.createEl("div");
    instructionsDiv.innerHTML = `
            <p>To check if ClaudeSync is installed:</p>
            <ol>
                <li>Open Command Prompt (cmd.exe)</li>
                <li>Run: <code>claudesync --version</code></li>
            </ol>
            <p>If ClaudeSync is installed via our installer, you can also try:</p>
            <pre>"${basePath}\\claudesync.bat" --version</pre>
            <p><strong>Expected locations:</strong></p>
            <ul>
                <li>Installation: <code>${basePath}</code></li>
                <li>Executable: <code>${exePath}</code></li>
            </ul>
        `;
    const buttonContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    const copyButton = buttonContainer.createEl("button", { text: "Copy Check Command" });
    copyButton.onclick = async () => {
      await navigator.clipboard.writeText(`"${basePath}\\claudesync.bat" --version`);
      new import_obsidian.Notice("Command copied to clipboard!");
    };
    const okButton = buttonContainer.createEl("button", { text: "OK", cls: "mod-cta" });
    okButton.onclick = () => this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CommandExecutor = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async executeCommand(command, args) {
    const { exec } = require("child_process");
    const util = require("util");
    const execPromise = util.promisify(exec);
    const fullCommand = args ? `${command} ${args}` : command;
    const execCommand = this.plugin.settings.claudeSyncPath ? `"${this.plugin.settings.claudeSyncPath}" ${fullCommand}` : `claudesync ${fullCommand}`;
    try {
      const vaultPath = this.plugin.app.vault.adapter.basePath || "";
      const { stdout, stderr } = await execPromise(execCommand, {
        cwd: vaultPath,
        shell: true,
        env: { ...process.env }
      });
      if (stderr) {
        console.warn("ClaudeSync stderr:", stderr);
      }
      return stdout;
    } catch (error) {
      console.error("ClaudeSync execution error:", error);
      if (error.code === "ENOENT") {
        throw new Error(`ClaudeSync not found. Please ensure it's installed and accessible via PATH or configure the full path in settings.`);
      } else if (error.message.includes("is not recognized")) {
        throw new Error(`ClaudeSync command not recognized. Please install ClaudeSync first using the "Install ClaudeSync" button.`);
      }
      throw new Error(`Command execution failed: ${error.message}`);
    }
  }
};
var ClaudeSyncSidebarView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.refreshInterval = null;
    this.commandExecutor = new CommandExecutor(plugin);
  }
  getViewType() {
    return "claudesync-sidebar";
  }
  getDisplayText() {
    return "ClaudeSync";
  }
  getIcon() {
    return "sync";
  }
  async onOpen() {
    this.createSidebarContent();
    this.startAutoRefresh();
  }
  async onClose() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
    }
  }
  createSidebarContent() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("claudesync-sidebar");
    const header = container.createEl("div", { cls: "claudesync-header" });
    header.createEl("h4", { text: "ClaudeSync Status" });
    const refreshBtn = header.createEl("button", {
      cls: "claudesync-refresh-btn",
      attr: { "aria-label": "Refresh" }
    });
    refreshBtn.innerHTML = "\u{1F504}";
    refreshBtn.onclick = () => this.refreshStatus();
    this.statusContainer = container.createEl("div", { cls: "claudesync-status" });
    const projectsHeader = container.createEl("div", { cls: "claudesync-section-header" });
    projectsHeader.createEl("h5", { text: "Projects" });
    const bulkActions = projectsHeader.createEl("div", { cls: "claudesync-bulk-actions" });
    const syncAllBtn = bulkActions.createEl("button", {
      text: "Sync All",
      cls: "claudesync-btn-small"
    });
    syncAllBtn.onclick = () => this.executeCommand("select sync");
    const pullChatsBtn = bulkActions.createEl("button", {
      text: "Pull Chats",
      cls: "claudesync-btn-small"
    });
    pullChatsBtn.onclick = () => this.executeCommand("select chat-pull");
    this.projectsContainer = container.createEl("div", { cls: "claudesync-projects" });
    const actionsHeader = container.createEl("div", { cls: "claudesync-section-header" });
    actionsHeader.createEl("h5", { text: "Quick Actions" });
    const actionsContainer = container.createEl("div", { cls: "claudesync-actions" });
    this.createActionButton(actionsContainer, "\u{1F50D} Detect Conflicts", "conflict detect");
    this.createActionButton(actionsContainer, "\u26A1 Resolve Conflicts", "conflict resolve");
    this.createActionButton(actionsContainer, "\u{1F4CA} Project Overview", "select overview");
    this.createActionButton(actionsContainer, "\u2699\uFE0F Settings", null, () => {
      this.app.setting.open();
      this.app.setting.openTabById("claudesync");
    });
    const installHeader = container.createEl("div", { cls: "claudesync-section-header" });
    installHeader.createEl("h5", { text: "Installation" });
    const installContainer = container.createEl("div", { cls: "claudesync-actions" });
    this.createActionButton(installContainer, "\u{1F4E6} Install ClaudeSync", null, async () => {
      await this.installClaudeSync();
    });
    this.createActionButton(installContainer, "\u{1F5D1}\uFE0F Uninstall ClaudeSync", null, async () => {
      await this.uninstallClaudeSync();
    });
    this.createActionButton(installContainer, "\u{1F504} Update ClaudeSync", null, async () => {
      await this.updateClaudeSync();
    });
    this.createActionButton(installContainer, "\u2705 Check Installation", null, async () => {
      await this.checkClaudeSyncInstallation();
    });
    this.refreshStatus();
  }
  createActionButton(container, text, command, customAction) {
    const button = container.createEl("button", {
      text,
      cls: "claudesync-action-btn"
    });
    if (customAction) {
      button.onclick = customAction;
    } else if (command) {
      button.onclick = () => this.executeCommand(command);
    }
  }
  async executeCommand(command, args) {
    try {
      await this.commandExecutor.executeCommand(command, args);
      new import_obsidian.Notice(`ClaudeSync: ${command} completed`);
    } catch (error) {
      console.error("ClaudeSync command failed:", error);
      new import_obsidian.Notice(`ClaudeSync error: ${error.message}`);
    }
  }
  async refreshStatus() {
    try {
      await this.updateGeneralStatus();
      await this.updateProjectsList();
    } catch (error) {
      console.error("Failed to refresh ClaudeSync status:", error);
      this.showError("Failed to refresh status");
    }
  }
  async updateGeneralStatus() {
    this.statusContainer.empty();
    try {
      const version = await this.commandExecutor.executeCommand("--version");
      const infoDiv = this.statusContainer.createEl("div", {
        cls: "claudesync-alert claudesync-alert-success"
      });
      infoDiv.innerHTML = `\u2705 ClaudeSync ${version.trim()} is installed`;
    } catch (error) {
      const alertDiv = this.statusContainer.createEl("div", {
        cls: "claudesync-alert claudesync-alert-warning"
      });
      alertDiv.innerHTML = "\u26A0\uFE0F ClaudeSync not found. Please install it first.";
    }
  }
  async updateProjectsList() {
    this.projectsContainer.empty();
    try {
      const projectsOutput = await this.commandExecutor.executeCommand("project ls");
      if (projectsOutput.includes("No projects found")) {
        this.projectsContainer.createEl("div", {
          text: "No projects configured",
          cls: "claudesync-no-projects"
        });
      } else {
        const lines = projectsOutput.split("\n").filter((line) => line.trim());
        lines.forEach((line) => {
          if (line.includes("(ID:")) {
            const projectDiv = this.projectsContainer.createEl("div", {
              cls: "claudesync-project-item"
            });
            projectDiv.createEl("span", { text: line.trim() });
          }
        });
      }
    } catch (error) {
      this.projectsContainer.createEl("div", {
        text: "Unable to fetch projects. Is ClaudeSync configured?",
        cls: "claudesync-no-projects"
      });
    }
  }
  showNotice(message, type) {
    new import_obsidian.Notice(message);
  }
  showError(message) {
    console.error(message);
    new import_obsidian.Notice(message);
  }
  startAutoRefresh() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
    }
    this.refreshInterval = window.setInterval(() => {
      this.refreshStatus();
    }, 3e4);
  }
  async installClaudeSync() {
    new import_obsidian.Notice(`Opening ClaudeSync installer...
Please follow the installation prompts in the command window.`);
    try {
      const pluginPath = `${this.app.vault.adapter.basePath || ""}\\.obsidian\\plugins\\claudesync`;
      const installerPath = `${pluginPath}\\install-claudesync.bat`;
      await navigator.clipboard.writeText(installerPath);
      const shellOpened = await this.tryOpenWithShellCommands(installerPath);
      if (!shellOpened) {
        new InstallModal(this.app, installerPath).open();
      }
    } catch (error) {
      new import_obsidian.Notice(`Error: ${error.message}`);
    }
  }
  async uninstallClaudeSync() {
    new ConfirmationModal(
      this.app,
      "Uninstall ClaudeSync",
      "Are you sure you want to uninstall ClaudeSync? This will remove the installation but preserve your project files.",
      async () => {
        try {
          const pluginPath = `${this.app.vault.adapter.basePath || ""}\\.obsidian\\plugins\\claudesync`;
          const uninstallerPath = `${pluginPath}\\uninstall-claudesync.bat`;
          await navigator.clipboard.writeText(uninstallerPath);
          const shellOpened = await this.tryOpenWithShellCommands(uninstallerPath);
          if (!shellOpened) {
            new import_obsidian.Notice(`Uninstaller path copied to clipboard.
Please run it manually from File Explorer.`);
          }
        } catch (error) {
          new import_obsidian.Notice(`Error: ${error.message}`);
        }
      }
    ).open();
  }
  async updateClaudeSync() {
    try {
      const pluginPath = `${this.app.vault.adapter.basePath || ""}\\.obsidian\\plugins\\claudesync`;
      const updatePath = `${pluginPath}\\update-claudesync.bat`;
      await navigator.clipboard.writeText(updatePath);
      const shellOpened = await this.tryOpenWithShellCommands(updatePath);
      if (!shellOpened) {
        new import_obsidian.Notice(`Update script path copied to clipboard.
Please run it manually from File Explorer.`);
      }
    } catch (error) {
      new import_obsidian.Notice(`Error: ${error.message}`);
    }
  }
  async checkClaudeSyncInstallation() {
    new CheckInstallationModal(this.app).open();
  }
  async tryOpenWithShellCommands(path) {
    try {
      const { exec } = require("child_process");
      exec(`start "" "${path}"`, (error) => {
        if (error) {
          console.error("Failed to open batch file:", error);
          new import_obsidian.Notice(`Failed to open installer. Path copied to clipboard.`);
        } else {
          new import_obsidian.Notice(`Installer opened. Please follow the prompts.`);
        }
      });
      return true;
    } catch (error) {
      console.error("Failed to execute command:", error);
      return false;
    }
  }
};
var ClaudeSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "ClaudeSync Settings" });
    new import_obsidian.Setting(containerEl).setName("ClaudeSync Command Path").setDesc('Path to the claudesync command (leave as "claudesync" if installed globally)').addText((text) => text.setPlaceholder("claudesync").setValue(this.plugin.settings.claudeSyncPath).onChange(async (value) => {
      this.plugin.settings.claudeSyncPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Python Path").setDesc('Path to Python executable (for WSL users, use "wsl python")').addText((text) => text.setPlaceholder("python").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Status Bar").setDesc("Display ClaudeSync status in the status bar").addToggle((toggle) => toggle.setValue(this.plugin.settings.showStatusBar).onChange(async (value) => {
      this.plugin.settings.showStatusBar = value;
      await this.plugin.saveSettings();
      this.plugin.updateStatusBar();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Side Panel").setDesc("Display the ClaudeSync side panel").addToggle((toggle) => toggle.setValue(this.plugin.settings.showSidePanel).onChange(async (value) => {
      this.plugin.settings.showSidePanel = value;
      await this.plugin.saveSettings();
      this.plugin.updateSidePanel();
    }));
    new import_obsidian.Setting(containerEl).setName("Conflict Resolution Strategy").setDesc("Default strategy for resolving conflicts").addDropdown((dropdown) => dropdown.addOption("manual", "Manual Resolution").addOption("local", "Prefer Local Changes").addOption("remote", "Prefer Remote Changes").setValue(this.plugin.settings.conflictResolutionStrategy).onChange(async (value) => {
      this.plugin.settings.conflictResolutionStrategy = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Auto Sync").setDesc("Automatically sync projects at regular intervals").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoSync).onChange(async (value) => {
      this.plugin.settings.autoSync = value;
      await this.plugin.saveSettings();
      this.plugin.updateAutoSync();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Interval").setDesc("Interval in seconds for auto sync (if enabled)").addSlider((slider) => slider.setLimits(60, 3600, 60).setValue(this.plugin.settings.syncInterval).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.syncInterval = value;
      await this.plugin.saveSettings();
      this.plugin.updateAutoSync();
    }));
  }
};
var ClaudeSyncPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = null;
    this.sidebarView = null;
    this.autoSyncInterval = null;
  }
  async onload() {
    await this.loadSettings();
    this.commandExecutor = new CommandExecutor(this);
    this.updateStatusBar();
    this.updateSidePanel();
    this.registerView(
      "claudesync-sidebar",
      (leaf) => new ClaudeSyncSidebarView(leaf, this)
    );
    this.addRibbonIcon("sync", "ClaudeSync", async (evt) => {
      const existingLeaves = this.app.workspace.getLeavesOfType("claudesync-sidebar");
      if (existingLeaves.length) {
        this.app.workspace.detachLeavesOfType("claudesync-sidebar");
      } else {
        const leaf = this.app.workspace.getLeftLeaf(false);
        if (leaf) {
          await leaf.setViewState({
            type: "claudesync-sidebar",
            active: true
          });
          this.app.workspace.revealLeaf(leaf);
        }
      }
    }).setAttribute("aria-label", "Toggle ClaudeSync sidebar");
    this.addCommands();
    this.addSettingTab(new ClaudeSyncSettingTab(this.app, this));
    this.updateAutoSync();
    console.log("ClaudeSync plugin loaded");
  }
  onunload() {
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
    }
    console.log("ClaudeSync plugin unloaded");
  }
  addCommands() {
    this.addCommand({
      id: "claudesync-push",
      name: "Push current project",
      callback: () => this.showCommandGuide("push")
    });
    this.addCommand({
      id: "claudesync-sync-all",
      name: "Sync all projects",
      callback: () => this.showCommandGuide("select sync")
    });
    this.addCommand({
      id: "claudesync-detect-conflicts",
      name: "Detect conflicts",
      callback: () => this.showCommandGuide("conflict detect")
    });
    this.addCommand({
      id: "claudesync-resolve-conflicts",
      name: "Resolve conflicts",
      callback: () => this.showCommandGuide("conflict resolve")
    });
    this.addCommand({
      id: "claudesync-pull-chats",
      name: "Pull chat conversations",
      callback: () => this.showCommandGuide("chat pull --backup-existing")
    });
    this.addCommand({
      id: "claudesync-pull-all-chats",
      name: "Pull chats for all projects",
      callback: () => this.showCommandGuide("select chat-pull")
    });
    this.addCommand({
      id: "claudesync-project-overview",
      name: "Show project overview",
      callback: () => this.showCommandGuide("select overview")
    });
    this.addCommand({
      id: "claudesync-project-status",
      name: "Show project status",
      callback: () => this.showCommandGuide("select status")
    });
    this.addCommand({
      id: "claudesync-refresh-sidebar",
      name: "Refresh ClaudeSync sidebar",
      callback: () => {
        if (this.sidebarView) {
          this.sidebarView.refreshStatus();
        }
      }
    });
  }
  showCommandGuide(command) {
    this.commandExecutor.executeCommand(command).then(() => {
      new import_obsidian.Notice(`ClaudeSync: ${command} completed`);
    }).catch((error) => {
      new import_obsidian.Notice(`ClaudeSync error: ${error.message}`);
    });
  }
  updateStatusBar() {
    if (this.statusBarItem) {
      this.statusBarItem.remove();
    }
    if (this.settings.showStatusBar) {
      this.statusBarItem = this.addStatusBarItem();
      this.statusBarItem.setText("\u{1F504} ClaudeSync");
      this.statusBarItem.addClass("claudesync-status-bar");
      this.updateStatusBarContent();
    }
  }
  async updateStatusBarContent() {
    if (this.statusBarItem) {
      this.statusBarItem.setText("\u2705 ClaudeSync Ready");
    }
  }
  async updateSidePanel() {
    if (this.settings.showSidePanel) {
      const leaf = this.app.workspace.getLeftLeaf(false);
      if (leaf) {
        await leaf.setViewState({
          type: "claudesync-sidebar",
          active: true
        });
      }
    } else {
      this.app.workspace.detachLeavesOfType("claudesync-sidebar");
    }
  }
  updateAutoSync() {
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
    }
    if (this.settings.autoSync) {
      new import_obsidian.Notice(`Auto-sync requires Shell Commands plugin.
Please install it from Community Plugins.`);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
